import ProjectDescription

let iOSTargetVersion = "15.0"

extension Project {
    public static func makeApp(
        name: String,
        platform: Platform,
        dependencies: [TargetDependency],
        testDependencies: [TargetDependency] = []
    ) -> [Target] {

        return [
            makeAppTarget(name: name, platform: platform, dependencies: dependencies),
            makeAppTestTarget(name: name, platform: platform, dependencies: testDependencies)
        ]
    }

    public static func makeFramework(
        name: String,
        platform: Platform,
        product: Product = .staticFramework,
        dependencies: [TargetDependency],
        testDependencies: [TargetDependency] = [],
        testResourcesRequired: Bool = false
    ) -> [Target] {

        return [
            makeFrameworkTarget(
                name: name,
                platform: platform,
                product: product,
                dependencies: dependencies
            ),
            makeFrameworkTestTarget(
                name: name,
                platform: platform,
                dependencies: testDependencies,
                resourcesRequired: testResourcesRequired
            )
        ]
    }
}

// MARK: - Private App Helpers

extension Project {
    private static func makeAppTarget(
        name: String,
        platform: Platform,
        dependencies: [TargetDependency]
    ) -> Target {

        let infoPlist: [String: InfoPlist.Value] = [
            "CFBundleShortVersionString": "1.0",
            "CFBundleVersion": "1",
            "UIMainStoryboardFile": "",
            "UILaunchStoryboardName": "LaunchScreen",
            "UIApplicationSceneManifest": [
                    "UIApplicationSupportsMultipleScenes": false,
                    "UISceneConfigurations": [:]
            ]
        ]

        return Target(
            name: name,
            platform: platform,
            product: .app,
            bundleId: "io.tuist.\(name)",
            deploymentTarget: .iOS(
                targetVersion: iOSTargetVersion,
                devices: .iphone
            ),
            infoPlist: .extendingDefault(with: infoPlist),
            sources: ["Targets/\(name)/Sources/**"],
            resources: ["Targets/\(name)/Resources/**"],
            scripts: [
                // .post(script: "tuist lint", name: "Swiftlint", basedOnDependencyAnalysis: false)
            ],
            dependencies: dependencies
        )
    }

    private static func makeAppTestTarget(
        name: String,
        platform: Platform,
        dependencies: [TargetDependency]
    ) -> Target {

        Target(
            name: "\(name)Tests",
            platform: platform,
            product: .unitTests,
            bundleId: "io.tuist.\(name)Tests",
            infoPlist: .default,
            sources: ["Targets/\(name)/Tests/**"],
            dependencies: [
                .target(name: "\(name)")
            ]
        )
    }
}

// MARK: - Private Framework Helpers

extension Project {
    private static func makeFrameworkTarget(
        name: String,
        platform: Platform = .iOS,
        product: Product = .staticFramework,
        dependencies: [TargetDependency] = []
    ) -> Target {
        let sources = Target(
            name: name,
            platform: platform,
            product: product,
            bundleId: "io.tuist.\(name)",
            deploymentTarget: .iOS(
                targetVersion: iOSTargetVersion,
                devices: .iphone
            ),
            infoPlist: .default,
            sources: [
                "Targets/\(name)/Sources/**"
            ],
            resources: [
                "Targets/\(name)/Resources/**"
            ],
            dependencies: dependencies
        )
        return sources
    }

    private static func makeFrameworkTestTarget(
        name: String,
        platform: Platform = .iOS,
        dependencies: [TargetDependency] = [],
        resourcesRequired: Bool = true
    ) -> Target {

        Target(
            name: "\(name)Tests",
            platform: platform,
            product: .unitTests,
            bundleId: "io.tuist.\(name)Tests",
            deploymentTarget: .iOS(
                targetVersion: iOSTargetVersion,
                devices: .iphone
            ),
            infoPlist: .default,
            sources: [
                "Targets/\(name)/Tests/Sources/**"
            ],
            resources: resourcesRequired ? ["App/\(name)/Tests/Resources/**"] : [],
            dependencies: [.target(name: name)] + dependencies
        )
    }
}
